#!/bin/sh

# Add kube-hunter directory to PATH
export PATH="$PATH:/root/.local/bin"

# Install kubectl if not present
if ! command -v kubectl &> /dev/null; then
    echo "kubectl not found, installing..."
    wget -O /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.22.2/bin/linux/amd64/kubectl
    chmod +x /usr/local/bin/kubectl
fi

# Get the IP address of the Kubernetes cluster
your_remote_target_ip_or_dns=$(kubectl cluster-info | grep 'Kubernetes master' | awk '/http/ {print $NF}' | sed -e 's/https\?:\/\///')

# Specify the directory for storing scan results within the pod
RESULTS_DIR="/app/scan-results"

echo "---------------------------------------------------------------------Scanning Tool Starting------------------------------------------------------------------------------------------------------"
# Iterate through all namespaces
for ns in $(kubectl get namespaces -o=jsonpath='{.items[*].metadata.name}'); do
    echo "Scanning namespace: $ns"

    # Iterate through deployments in the namespace
    for deployment in $(kubectl get deployments -n $ns -o=jsonpath='{.items[*].metadata.name}'); do
        echo "Scanning deployment: $deployment"

        # Run vulnerability scan using Trivy
        trivy_image=$(kubectl get deployment $deployment -n $ns -o=jsonpath='{.spec.template.spec.containers[0].image}')
        trivy_results="${ns}_${deployment}_$(date -u +"%Y%m%d%H%M%S")_trivy-results.json"
        trivy image --cache-dir /tmp/trivy --format json -o "$RESULTS_DIR/$trivy_results" "$trivy_image"

        echo "Scanning completed for deployment: $deployment"
    done
done

# Get the name of the pods created by the kube-bench job
kube_bench_pods=$(kubectl get pods -n default --selector=job-name=kube-bench-master -o jsonpath='{.items[*].metadata.name}')

# Check if kube_bench_pods is not empty
if [ -n "$kube_bench_pods" ]; then
    # Loop through the pod names and perform actions
    for pod in $kube_bench_pods; do
        echo "Processing pod: $pod"
        # Perform actions on each pod, e.g., kubectl logs
        kubectl logs "$pod" -n default > "$RESULTS_DIR/${pod}_kube-bench-results.json"
    done
else
    echo "No kube-bench pods found."
fi

# Run kube-hunter with custom parameters
kube_hunter_results="$RESULTS_DIR/$(date -u +"%Y%m%d%H%M%S")_kube-hunter-results.json"
kube-hunter \
  --remote "$your_remote_target_ip_or_dns" \
  --active \
  --enable-cve-hunting \
  --log info \
  --log-file "$RESULTS_DIR/kube-hunter.log" \
  --report json \
  --dispatch stdout | tee "$kube_hunter_results" 2>&1

echo "Sleeping to copy..."
sleep 10

echo "----------------------------------------------------------------------------Scanning Tool Done---------------------------------------------------------------------------------------------------"
echo "---------------------------------------------------------------------Look For the results in result access pod--------------------------------------------------------------------------------"

