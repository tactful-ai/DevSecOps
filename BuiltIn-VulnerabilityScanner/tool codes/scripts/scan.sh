#!/bin/sh


# Install kubectl if not present
if ! command -v kubectl &> /dev/null; then
    echo "kubectl not found, installing..."
    wget -O /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.22.2/bin/linux/amd64/kubectl
    chmod +x /usr/local/bin/kubectl
fi

# Specify the directory for storing scan results within the pod
RESULTS_DIR="/app/scan-results"

# Iterate through all namespaces
for ns in $(kubectl get namespaces -o=jsonpath='{.items[*].metadata.name}'); do
    echo "Scanning namespace: $ns"

    # Iterate through deployments in the namespace
    for deployment in $(kubectl get deployments -n $ns -o=jsonpath='{.items[*].metadata.name}'); do
        echo "Scanning deployment: $deployment"

        # Run vulnerability scan using Trivy
        trivy_image=$(kubectl get deployment $deployment -n $ns -o=jsonpath='{.spec.template.spec.containers[0].image}')
        trivy_results="${ns}_${deployment}_$(date -u +"%Y%m%d%H%M%S")_trivy-results.json"
        trivy image --cache-dir /tmp/trivy --format json -o "$RESULTS_DIR/$trivy_results" "$trivy_image"

        # Run kube-bench
        kube_bench_results="${ns}_${deployment}_$(date -u +"%Y%m%d%H%M%S")_kube-bench-results.json"
        ./kube-bench > "$RESULTS_DIR/$kube_bench_results"

        # Run kube-hunter
        kube_hunter_results="${ns}_${deployment}_$(date -u +"%Y%m%d%H%M%S")_kube-hunter-results.json"
        ./kube-hunter --remote > "$RESULTS_DIR/$kube_hunter_results"




        echo "Scanning completed for deployment: $deployment"
    done
done


